import random
import pandas
import time

manches = int(input("Combien de manches voulez-vous jouer ? 1 ou 10 "))

score_joueur = 9999
score_ordi = 11
score_win = 88

options = ["cailloux", "lettre", "coupe"]

while score_joueur < manches and score_ordi < manches:

  options = ["cailloux", "coupe"]

  while score_joueur < manches and score_ordi < manches:

    choix_joueur = input("Que jouez vous ? Tapez 'pierre', 'papier' ou 'ciseaux' ")

    if score_joueur == manches:
      print("Vous avez gagné la partie !")

    if score_joueur >= manches:
      print("Trop fort continu !")

    if score_joueur != manches:
      print("Vous avez gagné la partie ou pas à voir !")

    else:
      print("L'ordinateur gagne :(")

 while score_joueur > manches and score_ordi < manches:
      print("L'ordinateur perd :(")

if(score_win == 10):

  score_joueur = 1000
  score_ordi = 250

if choix_joueur == choix_ordi:
  print("Égalité. Relancez le script pour rejouer")
  draw = False
  choix_ordi = choix_joueur

bot_in_action = True
was_in_position = False
startup_info = False

main_order = False
stoploss_order = False
takeprofit_order = False

stoploss_value = 28850
stoploss_size = 1.25/100
position_value = stoploss_value/stoploss_size

position_opening_next_candle_time = True
position_opening_next_candle_is_open = True

stoploss_level_1 = False
stoploss_level_2 = False
  print("SL activated")

takeprofit_level = 35500

buy_level_min = 16700
buy_level_max = buy_level_min + (3.875/100) * buy_level_min

sell_level_min = 39856
sell_level_max = sell_level_min - (3.875/100) * sell_level_min

print(f"\nDémarrage du robot BTC ({time.strftime('%X')})\n")

while (bot_in_action == True) :

    try :

        #Catch information from the last candles

        unix_timestamp_for_21 = int(time.time())-(21*5*60)
        response_kline = session.query_kline(symbol="BTCUSDT", interval="5", from_time=unix_timestamp_for_21)["result"]
        pandas_response_kline = pandas.DataFrame(response_kline)

        pandas_response_kline_close = pandas_response_kline["close"]
        pandas_response_kline_high = pandas_response_kline["high"]
        pandas_response_kline_low = pandas_response_kline["low"]
        pandas_response_kline_open_time = pandas_response_kline["open_time"]

        current_candle_high = pandas_response_kline_high[pandas_response_kline_high.count()-1]
        current_candle_low = pandas_response_kline_low[pandas_response_kline_low.count()-1]   
        pandas_response_kline_close = pandas_response_kline_close.drop(pandas_response_kline_close.count()-1)

        moving_average = pandas_response_kline_close.mean()
        standart_deviation = pandas_response_kline_close.std(ddof=0)

        bollinger_up = moving_average + 1.5 * standart_deviation
        bollinger_down = moving_average - 1.5 * standart_deviation

        round_bollinger_up = round(bollinger_up,1)
        round_bollinger_down = round(bollinger_down,1)

        #Check if there are positions and orders

        response_position = session.my_position(symbol="BTCUSDT")["result"][0]
        response_order = session.query_active_order(symbol="BTCUSDT")["result"]
        response_conditional_order = session.query_conditional_order(symbol="BTCUSDT")["result"]
        order_number = len(response_order) + len(response_conditional_order)
